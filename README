ARCHIVE
=======

What it should do
-----------------

1.  Keep a snapshot on the backup server of one or more directories on your
	local system.

2.	Keep an archive on the backup server of every file that has been removed or
    replaced in the snapshot. Or even every file in the snapshot, depending on
    the settings in your config file.


To do list
----------

1.  Basics
	1 X	Read a config file.
	2	Parse arguments on the command line.
	3 X	Display notices, warnings, errors etc.
	4 X Maintain a log file with notices, warnings, errors etc.

2.	Communication
	1.	Assuming the script exists on both the server and the client, we need
		the server to execute commands on the client. i.e. To create a hash
		of the locally stored files.
	2.	I'll have to decide if this will be a separate call for each action, or
		a remote service. This client side service should terminate when the
		connection is lost. 

3. Indexing
	1.	There should be an index file on the server and all files in the
		snapshot and the archive should be stored in this index file. The index
		be: hash --> file_paths
	2.  It must be possible to (re)build the entire index and to update it per
		item. i.e. when a file is removed or updated.
	3.	Given a file hash, all files with the exact same content can be recalled
		And instead of sending the file over ssh, the program will just create a
		hard link to one of the existing file and update the index.   

4.	Synchronisation
	-	For all files in the snapshot:
		-	If it does not exist on the client or the date and size do not match
			>	Remove the file from the index
			>	Post fix the filename with its timestamp
			>	Move the file to the archive
			>	Add the file to the index
	-	For all files on the client:
		-	If it does not exist in the snapshot
			-	Depending on the config:
			  	>	Create a hash of the file on the client side
				-	If the hash is in the index:
					>	Create a hard link to one of the files in the index
				-	Else:
					>	Copy the file from the client into the snapshot
				>	Add the file to the index
			-	Or:
				>	Copy the file from the client into the snapshot
			  	>	Create a hash of the file in the snapshot
			  	-	If the hash is in the index:
					>	Remove the file
					>	Create a hard link to one of the files in the index
				>	Add the file to the index
			  	
Requirements
------------
python2.7
python-paramiko